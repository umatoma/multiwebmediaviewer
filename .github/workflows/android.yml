name: Android CI

on:
  push:
    branches: 
      - master
      - test-release

jobs:
  testUnitTest:
    runs-on: [macos-latest]
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: testStubDebugUnitTest
      run: ./gradlew testStubDebugUnitTest

  connectedAndroidTest:
    runs-on: [macos-latest]
    env:
      PACKAGE_NAME: 'system-images;android-28;google_apis_playstore;x86_64'
      AVD_NAME: 'Avd_Android_28_Google_Apis_Playstore_x86_64'
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Install Android Emulator
      run: |
        echo y | $ANDROID_HOME/tools/bin/sdkmanager --install $PACKAGE_NAME
        echo no | $ANDROID_HOME/tools/bin/avdmanager create avd --name $AVD_NAME --package $PACKAGE_NAME
    - name: Run Android Emulator
      run: |
        $ANDROID_HOME/emulator/emulator -list-avds
        $ANDROID_HOME/emulator/emulator -avd $AVD_NAME -no-window -no-boot-anim -no-audio -netdelay none -netspeed full > /dev/null 2>&1 &
        $ANDROID_HOME/platform-tools/adb wait-for-local-device
        $ANDROID_HOME/platform-tools/adb devices
        $ANDROID_HOME/platform-tools/adb shell service list
    - name: connectedStubDebugAndroidTest
      run: ./gradlew connectedStubDebugAndroidTest -Pandroid.testInstrumentationRunnerArguments=size=large

  assembleProdRelease:
    runs-on: [macos-latest]
    env:
      GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
      RELEASE_STORE: ${{ secrets.RELEASE_STORE }}
      RELEASE_STORE_FILE: /tmp/release.keystore
      RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
      RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
      RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Install google-services.json
        run: echo $GOOGLE_SERVICES_JSON > ./app/google-services.json
      - name: Install keystore
        run: |
          mkdir -p `dirname $RELEASE_STORE_FILE`
          echo $RELEASE_STORE | base64 --decode --output $RELEASE_STORE_FILE
      - name: Assemble debug with Gradle
        run: ./gradlew assembleProdRelease
      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: app-prod-release.apk
          path: ./app/build/outputs/apk/prod/release/app-prod-release.apk

  distributeProdRelease:
    needs: [testUnitTest, connectedAndroidTest, assembleProdRelease]
    runs-on: [macos-latest]
    env:
      FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
      FIREBASE_TEST_GROUPS: ${{ secrets.FIREBASE_TEST_GROUPS }}
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
    steps:
    - uses: actions/checkout@v1
    - name: Download artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: app-prod-release.apk
        path: build
    - name: Install firebase cli
      run: curl -sL firebase.tools | bash
    - name: Distribute application
      run: >
        firebase appdistribution:distribute ./build/app-prod-release.apk
        --app $FIREBASE_APP_ID
        --release-notes "${{ github.sha }}"
        --groups $FIREBASE_TEST_GROUPS
